[{"F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\index.js":"1","F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\App.js":"2","F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\reportWebVitals.js":"3","F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\firebase.js":"4"},{"size":517,"mtime":1611672563872,"results":"5","hashOfConfig":"6"},{"size":7394,"mtime":1619886820953,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":479,"mtime":1619620252664,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pv0nu7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\index.js",[],["20","21"],"F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\App.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40"],"import \"./App.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTrash,\r\n  faEdit,\r\n  faPlus,\r\n  faCheck,\r\n  faTimes,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport firebase from \"firebase\";\r\nimport db from \"./firebase\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([\"\"]);\r\n  const [currTask, setCurrTask] = useState(0);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .orderBy(\"timestamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        setTodos(\r\n          snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            todo: doc.data().todo,\r\n            status: doc.data().status,\r\n          }))\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [editInput, setEditInput] = useState(\"\");\r\n  const [editToggle, setEditToggle] = useState(\"\");\r\n  const [markerWidth, setWidth] = useState(\"20px\");\r\n  const [markerLeft, setLeft] = useState(\"10px\");\r\n\r\n  const addTodos = (event) => {\r\n    event.preventDefault();\r\n    // setTodos([...todos, input]);\r\n    db.collection(\"users\")\r\n      .add({\r\n        todo: input,\r\n        status: false,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      })\r\n      .catch((err) => alert(err.message));\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>TODO</h1>\r\n      <div className=\"App__Box\">\r\n        <div className=\"App__input\">\r\n          <form>\r\n            <p>+</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Create a new todo...\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              autoComplete=\"off\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              disabled={!input}\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n              onClick={addTodos}\r\n            >\r\n              ADD\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"App__display\">\r\n          <ul>\r\n            {todos\r\n              .sort((a, b) => (a.status == true && b.status == false ? 1 : -1))\r\n              .map((todo) => {\r\n                if (\r\n                  currTask == 0 ||\r\n                  (currTask == 1 && todo.status == false) ||\r\n                  (currTask == 2 && todo.status == true)\r\n                ) {\r\n                  return (\r\n                    <>\r\n                      <li>\r\n                        <div className=\"checkbox__cover\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            checked={todo.status}\r\n                            onChange={(e) => {\r\n                              db.collection(\"users\")\r\n                                .doc(todo.id)\r\n                                .update({ status: e.target.checked });\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <p\r\n                          style={\r\n                            todo.status\r\n                              ? { textDecoration: \"line-through\" }\r\n                              : { textDecoration: \"none\" }\r\n                          }\r\n                        >\r\n                          {todo.todo}\r\n                        </p>\r\n                        <button\r\n                          onClick={() => {\r\n                            setEditInput(todo.todo);\r\n                            setEditToggle(todo.id);\r\n                          }}\r\n                        >\r\n                          <FontAwesomeIcon icon={faEdit} />\r\n                        </button>\r\n                        <button\r\n                          onClick={() =>\r\n                            db.collection(\"users\").doc(todo.id).delete()\r\n                          }\r\n                        >\r\n                          <FontAwesomeIcon icon={faTrash} />\r\n                        </button>\r\n                      </li>\r\n                      {editToggle == todo.id ? (\r\n                        <li className=\"editItem\">\r\n                          <input\r\n                            value={editInput}\r\n                            onChange={(e) => {\r\n                              setEditInput(e.target.value);\r\n                            }}\r\n                          ></input>\r\n                          <button\r\n                            onClick={() => {\r\n                              db.collection(\"users\").doc(todo.id).update({\r\n                                todo: editInput,\r\n                              });\r\n\r\n                              setEditInput(\"\");\r\n                              setEditToggle(\"\");\r\n                            }}\r\n                          >\r\n                            <FontAwesomeIcon icon={faCheck} />\r\n                          </button>\r\n                          <button\r\n                            onClick={() => {\r\n                              setEditInput(\"\");\r\n                              setEditToggle(\"\");\r\n                            }}\r\n                          >\r\n                            <FontAwesomeIcon icon={faTimes} />\r\n                          </button>\r\n                        </li>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </>\r\n                  );\r\n                }\r\n              })}\r\n          </ul>\r\n        </div>\r\n        <div className=\"App_controls\">\r\n          <p>{todos.filter((todo) => !todo.status).length} items left</p>\r\n          <nav>\r\n            <span\r\n              id=\"marker\"\r\n              style={{ width: markerWidth, left: markerLeft }}\r\n            ></span>\r\n            <a\r\n              className={currTask == 0 ? \"active\" : \"\"}\r\n              onClick={(e) => {\r\n                setCurrTask(0);\r\n                console.log(e);\r\n\r\n                setWidth(e.target.offsetWidth + \"px\");\r\n                setLeft(e.target.offsetLeft + \"px\");\r\n              }}\r\n            >\r\n              All\r\n            </a>\r\n            <a\r\n              className={currTask == 1 ? \"active\" : \"\"}\r\n              onClick={(e) => {\r\n                setCurrTask(1);\r\n                console.log(e);\r\n\r\n                setWidth(e.target.offsetWidth + \"px\");\r\n                setLeft(e.target.offsetLeft + \"px\");\r\n              }}\r\n            >\r\n              Active\r\n            </a>\r\n            <a\r\n              className={currTask == 2 ? \"active\" : \"\"}\r\n              onClick={(e) => {\r\n                setCurrTask(2);\r\n                console.log(e);\r\n                setWidth(e.target.offsetWidth + \"px\");\r\n                setLeft(e.target.offsetLeft + \"px\");\r\n              }}\r\n            >\r\n              Completed\r\n            </a>\r\n          </nav>\r\n          <a\r\n            onClick={() => {\r\n              const confirmBox = window.confirm(\r\n                \"Do you want to delete all completed tasks?\"\r\n              );\r\n              if (confirmBox === true) {\r\n                todos.map((todo) => {\r\n                  if (todo.status === true) {\r\n                    db.collection(\"users\").doc(todo.id).delete();\r\n                  }\r\n                });\r\n              }\r\n            }}\r\n          >\r\n            Clear Completed\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\reportWebVitals.js",[],"F:\\ROHIT\\GitHub\\Todo-List-WebApp-Testing\\src\\firebase.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":6,"column":3,"nodeType":"47","messageId":"48","endLine":6,"endColumn":9},{"ruleId":"49","severity":1,"message":"50","line":70,"column":15,"nodeType":"51","endLine":70,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":80,"column":41,"nodeType":"54","messageId":"55","endLine":80,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":80,"column":61,"nodeType":"54","messageId":"55","endLine":80,"endColumn":63},{"ruleId":"56","severity":1,"message":"57","line":81,"column":27,"nodeType":"58","messageId":"59","endLine":81,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":83,"column":28,"nodeType":"54","messageId":"55","endLine":83,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":84,"column":29,"nodeType":"54","messageId":"55","endLine":84,"endColumn":31},{"ruleId":"52","severity":1,"message":"53","line":84,"column":49,"nodeType":"54","messageId":"55","endLine":84,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":85,"column":29,"nodeType":"54","messageId":"55","endLine":85,"endColumn":31},{"ruleId":"52","severity":1,"message":"53","line":85,"column":49,"nodeType":"54","messageId":"55","endLine":85,"endColumn":51},{"ruleId":"52","severity":1,"message":"53","line":126,"column":35,"nodeType":"54","messageId":"55","endLine":126,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":171,"column":13,"nodeType":"62","endLine":180,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":172,"column":35,"nodeType":"54","messageId":"55","endLine":172,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":183,"column":13,"nodeType":"62","endLine":192,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":184,"column":35,"nodeType":"54","messageId":"55","endLine":184,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":195,"column":13,"nodeType":"62","endLine":203,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":196,"column":35,"nodeType":"54","messageId":"55","endLine":196,"endColumn":37},{"ruleId":"60","severity":1,"message":"61","line":207,"column":11,"nodeType":"62","endLine":220,"endColumn":12},{"ruleId":"56","severity":1,"message":"63","line":213,"column":34,"nodeType":"58","messageId":"64","endLine":213,"endColumn":36},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'faPlus' is defined but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation"]